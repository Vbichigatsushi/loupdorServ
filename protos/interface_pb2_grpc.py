# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protos.interface_pb2 as interface__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in interface_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LoupdorServiceStub(object):
    """The LoupdorService service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMap = channel.unary_unary(
                '/LoupdorService/CreateMap',
                request_serializer=interface__pb2.MapSizeRequest.SerializeToString,
                response_deserializer=interface__pb2.MapSizeReply.FromString,
                _registered_method=True)
        self.TimerForTour = channel.unary_unary(
                '/LoupdorService/TimerForTour',
                request_serializer=interface__pb2.SecondForTimerRequest.SerializeToString,
                response_deserializer=interface__pb2.SecondForTimerReply.FromString,
                _registered_method=True)
        self.NbMaxPlayer = channel.unary_unary(
                '/LoupdorService/NbMaxPlayer',
                request_serializer=interface__pb2.NbplayerRequest.SerializeToString,
                response_deserializer=interface__pb2.NbplayerReply.FromString,
                _registered_method=True)
        self.StartGame = channel.unary_unary(
                '/LoupdorService/StartGame',
                request_serializer=interface__pb2.StartGameRequest.SerializeToString,
                response_deserializer=interface__pb2.StartGameReply.FromString,
                _registered_method=True)
        self.Inscrption = channel.unary_unary(
                '/LoupdorService/Inscrption',
                request_serializer=interface__pb2.InscriptionRequest.SerializeToString,
                response_deserializer=interface__pb2.InscriptionReply.FromString,
                _registered_method=True)
        self.Move = channel.unary_unary(
                '/LoupdorService/Move',
                request_serializer=interface__pb2.MoveRequest.SerializeToString,
                response_deserializer=interface__pb2.MoveReply.FromString,
                _registered_method=True)


class LoupdorServiceServicer(object):
    """The LoupdorService service definition.
    """

    def CreateMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimerForTour(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NbMaxPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inscrption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoupdorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMap,
                    request_deserializer=interface__pb2.MapSizeRequest.FromString,
                    response_serializer=interface__pb2.MapSizeReply.SerializeToString,
            ),
            'TimerForTour': grpc.unary_unary_rpc_method_handler(
                    servicer.TimerForTour,
                    request_deserializer=interface__pb2.SecondForTimerRequest.FromString,
                    response_serializer=interface__pb2.SecondForTimerReply.SerializeToString,
            ),
            'NbMaxPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.NbMaxPlayer,
                    request_deserializer=interface__pb2.NbplayerRequest.FromString,
                    response_serializer=interface__pb2.NbplayerReply.SerializeToString,
            ),
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=interface__pb2.StartGameRequest.FromString,
                    response_serializer=interface__pb2.StartGameReply.SerializeToString,
            ),
            'Inscrption': grpc.unary_unary_rpc_method_handler(
                    servicer.Inscrption,
                    request_deserializer=interface__pb2.InscriptionRequest.FromString,
                    response_serializer=interface__pb2.InscriptionReply.SerializeToString,
            ),
            'Move': grpc.unary_unary_rpc_method_handler(
                    servicer.Move,
                    request_deserializer=interface__pb2.MoveRequest.FromString,
                    response_serializer=interface__pb2.MoveReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LoupdorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('LoupdorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoupdorService(object):
    """The LoupdorService service definition.
    """

    @staticmethod
    def CreateMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoupdorService/CreateMap',
            interface__pb2.MapSizeRequest.SerializeToString,
            interface__pb2.MapSizeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TimerForTour(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoupdorService/TimerForTour',
            interface__pb2.SecondForTimerRequest.SerializeToString,
            interface__pb2.SecondForTimerReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NbMaxPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoupdorService/NbMaxPlayer',
            interface__pb2.NbplayerRequest.SerializeToString,
            interface__pb2.NbplayerReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoupdorService/StartGame',
            interface__pb2.StartGameRequest.SerializeToString,
            interface__pb2.StartGameReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Inscrption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoupdorService/Inscrption',
            interface__pb2.InscriptionRequest.SerializeToString,
            interface__pb2.InscriptionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LoupdorService/Move',
            interface__pb2.MoveRequest.SerializeToString,
            interface__pb2.MoveReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
